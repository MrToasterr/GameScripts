using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    
    //[DONE]  using a ground check for jumping 
    //        adding WallJumping (can be added after all the other ones)
    //        Using particles for when running


    Rigidbody2D rb_;
    [SerializeField] private Transform wallCheck;
    [SerializeField] private Transform groundCheck;
    [SerializeField] private LayerMask Map;

    [SerializeField] private float moveSpeed;
    [SerializeField] private float jumpingForce;
    public ParticleSystem dust;
    

    

    private void Start()
    {
        rb_ = GetComponent<Rigidbody2D>();
        
    }
    

    private void Update()
    {


        // Movement
        rb_.velocity = new Vector2(Input.GetAxisRaw("Horizontal") * moveSpeed, rb_.velocity.y);
        


        // Jumping
        if (Input.GetKeyDown(KeyCode.Space) &&  isGrounded())
        {
            //rb_.AddForce = (new Vector2(rb_.velocity.x, jumpingForce),ForceMode2D.Force);
            rb_.velocity = new Vector2(rb_.velocity.x, jumpingForce);
            
            
        }
        
        if (touchingWall() && !isGrounded())
        {
            
            
             Debug.Log("WallJumpAble");
        }
       
        // Jumping higher if you hold the space bar 
        // don't like how it makes the normal jump lower, but i just wanted to test.

        //if (Input.GetKeyUp(KeyCode.Space)&& rb_.velocity.y > 0)
        //{
        //  rb_.velocity = new Vector2(rb_.velocity.x, rb_.velocity.y * .3f);
        //}
    }


    // GroundCheck
    private bool isGrounded()
    {
        // return Physics2D.BoxCast(coll.bounds.center, coll.bounds.size, 0f, Vector2.down, .1f, jumpAbleGround);
        
        return Physics2D.OverlapCircle(groundCheck.position, .2f, Map);
    }
    
    private bool touchingWall()
    {
        return Physics2D.OverlapCircle(wallCheck.position, .2f, Map);
    }


    // Going to be used for Particles
    void CreateDust()
    {
        dust.Play();
    }

    

}
