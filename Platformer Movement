using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    
    //[DONE]  using a ground check for jumping 
    //        adding WallJumping (can be added after all the other ones)
    //        Using particles for when running


    Rigidbody2D rb_;
    
    [SerializeField] private Transform wallCheck;
    [SerializeField] private Transform groundCheck;
    [SerializeField] private LayerMask Map;

    bool isFacingRight;
    float mx = 0f;
    
    public float slideSpeed = 2f;


    [SerializeField] private float moveSpeed;
    [SerializeField] private float jumpingForce;
    public ParticleSystem dust;
    

    private void Start()
    {
        rb_ = GetComponent<Rigidbody2D>();
        
    }
    

    private void Update()
    {
        // Movement
        rb_.velocity = new Vector2(Input.GetAxisRaw("Horizontal") * moveSpeed, rb_.velocity.y);

        wallJump();
        Jumping();
        WallSliding();
    }
    
    private void FixedUpdate()
    {
        // Flips
        mx = Input.GetAxisRaw("Horizontal");
        if (mx < 0)
        {
            isFacingRight = false;
            transform.localScale = new Vector2(-.5f, transform.localScale.y);
        }
        else if (mx > 0)
        {
            isFacingRight = true;
            transform.localScale = new Vector2(.5f, transform.localScale.y);
        }
    }
    
 //WallSliding
    private void WallSliding()
    {
        if (Input.GetKey(KeyCode.A) && touchingWall() && !isGrounded() ||
            Input.GetKey(KeyCode.D) && touchingWall() && !isGrounded())
        {
            rb_.velocity = new Vector2(rb_.velocity.x, -slideSpeed);
        }
    }

    // Jumping
    private void Jumping()
    {
        if (Input.GetKeyDown(KeyCode.Space) && isGrounded())
        {
            
            rb_.velocity = new Vector2(rb_.velocity.x, jumpingForce);
        }
    }


    // WallJumping
    private void wallJump()
    {
        if (Input.GetKeyDown(KeyCode.Space)&& touchingWall() && !isGrounded())
        {
            Debug.Log("CanWallJump");
            
        }
    }


    // GroundCheck & WallCheck
    private bool isGrounded()
    {   
       
        return Physics2D.OverlapCircle(groundCheck.position, .2f, Map);
    }

    private bool touchingWall()
    {
        return Physics2D.OverlapCircle(wallCheck.position, .2f, Map);
    }


}





// Jumping higher if you hold the space bar 
// don't like how it makes the normal jump lower, but i just wanted to test.

//if (Input.GetKeyUp(KeyCode.Space)&& rb_.velocity.y > 0)
//{
//  rb_.velocity = new Vector2(rb_.velocity.x, rb_.velocity.y * .3f);
//}


// Making a new box collider with the same shape as the one i'm using for collision
// coll.bounds.center and size just means they get the same size and position as the box collider
// The 0f is for rotation
// vector2.down is the box going a bit down .1f
// jumpAbleGround is a layermask, its just a layer you can give to your object
// When collided with said layer it returns the IsGrounded as True

// return Physics2D.BoxCast(coll.bounds.center, coll.bounds.size, 0f, Vector2.down, .1f, jumpAbleGround);



//public float wallJumpTime = .2f;
//public float wallSlideSpeed = -.5f;
//public float wallDistance = .5f;
//bool isWallSliding = false;
//bool Something = false;
//RaycastHit2D wallCheckHit;
//float jumpTime;



//if (isFacingRight)
//{
//    wallCheckHit = Physics2D.Raycast(transform.position, new Vector2(wallDistance, 0f), wallDistance, Map);
//}
//else
//{
//    wallCheckHit = Physics2D.Raycast(transform.position, new Vector2(-wallDistance, 0f), wallDistance, Map);
//}

//if (wallCheckHit && !isGrounded() && mx != 0)
//{
//    isWallSliding = true;
//   jumpTime = Time.time + wallJumpTime;
//}
//else if (jumpTime < Time.time)
//{
//isWallSliding = false;
//}

//if (isWallSliding)
//{
//  rb_.velocity = new Vector2(rb_.velocity.x, Mathf.Clamp(rb_.velocity.y, wallSlideSpeed, float.MaxValue));
//}
